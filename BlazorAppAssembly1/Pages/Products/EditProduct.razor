@page "/editproduct/{id}"
@using blazorappdemo;
@inject IProductService productService;
@inject ICategoryService categoryService;
@inject NavigationManager NavigationManager;

<PageTitle>Edit Product</PageTitle>

<ModuleTitle Title="Edit Product"></ModuleTitle>

<button class="btn btn-dark" @onclick="@(() => NavigationManager.NavigateTo("/product"))">Volver</button>
@*<EditForm Model="@product" OnSubmit="@Save">
    <div class="row">
        <div class="col-8 form-group">
            <label for="Title" class="col-form-label">Title</label>
            <InputText id="title" @bind-Value="product.Title" class="form-control" required />
        </div>

        <div class="col form-group">
            <label for="price" class="col-form-label">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" min="0" required class="form-control" />
        </div>

    </div>

    <div class="row">
        <div class="col form-group">
            <label for="category" class="col-form-label">Category</label>
            <InputSelect id="category" @bind-Value="product.CategoryId" required class="form-control">
                <option>Select Category...</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
        <div class="col form-group">
            <label for="image" class="col-form-label">Image (Url)</label>
            <InputText id="image" @bind-Value="product.Image" required class="form-control" />
        </div>
    </div>
    <div class="form-group">
        <label for="description" class="col-form-label">Description</label>
        <InputTextArea id="description" @bind-Value="product.Description" required class="form-control"></InputTextArea>
    </div>

    <hr />
    <button class="btn btn-primary" type="submit">Save</button>
</EditForm>*@

@code {

    [Parameter]
    [EditorRequired]
    public string id { set; get; }

    private Product product = new();
    private List<Category> categories = new List<Category>();


    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(id), out var value))
        {
            if (value is not null)
                id = value;
        }
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.Get();
        product = await productService.GetID(int.Parse(id));
        //Product productToUpdate = product;

    }

    private async Task Save()
    {
        product.Images = new string[1] { product.Image };
        await productService.Add(product);
        NavigationManager.NavigateTo("/product");
    }
}
