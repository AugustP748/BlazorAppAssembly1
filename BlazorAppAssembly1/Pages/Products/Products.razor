@page "/product"
@using blazorappdemo;
@inject ILogger<Products> logger;
@inject IProductService productService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime jSRuntime;

<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products" />

<button class="btn btn-dark" @onclick="@(() => NavigationManager.NavigateTo("/addproduct"))">+ New Product</button>


@if (products?.Count > 0)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210">
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C")</p>
                    <button class="btn btn-warning btn-edit" title="Edit" @onclick="@(() => GoToUpdatePage(product.Id))">
                        <span class="oi oi-pencil"></span>
                    </button>
                    <button class="btn btn-danger btn-delete" title="Delete" @onclick="@(() => DeleteProduct(product))">
                        <span class="oi oi-trash"></span>
                    </button>
                </div>
            </div>
        }
    </div>

}
else
{
    <p>No hay productos para mostrar</p>
}

@code
{
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task GetProducts()
    {
        products = await productService.Get();
    }

    private async Task DeleteProduct(Product product)
    {
        if(!await jSRuntime.InvokeAsync<bool>("confirm",$"Are you sure you want to remove {product.Title}"))
        {
            return;
        }
        await productService.Delete(product.Id);
        await GetProducts();
    }

    private void GoToUpdatePage(int id)
    {
        NavigationManager.NavigateTo($"/editproduct/{id}");
    }
}